#
# Azure Pipelines for LibreCAD
#


# Branches to monitor
trigger:
- master
- play_with_azure


# Don't run on pull requests
pr: none


stages:

- stage: BuildStage
  displayName: 'Build stage'


  jobs:

  - job: LinuxBuild
    displayName: 'Linux build'
    condition: False  # disable this job for now

    pool:
      vmImage: 'ubuntu-16.04'

    steps:

    - bash: |
        sudo apt-get -qq install \
            qt5-default \
            qtbase5-dev \
            libqt5svg5-dev \
            qttools5-dev \
            qttools5-dev-tools \
            libmuparser-dev \
            libboost-dev \
            libfreetype6-dev \
            libicu-dev \
            pkg-config
      displayName: 'Install dependencies'

    - bash: |
        qmake -r librecad.pro CONFIG+=debug_and_release \
        && make release -j$(nproc)
      displayName: 'Build from source'

    - bash: |
        ./scripts/build-appimage.sh
      displayName: 'Build AppImage'

    - task: CopyFiles@2
      inputs:
        sourceFolder: './AppImage'
        contents: '*.AppImage'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: AppImage


  - job: WindowsBuild
    displayName: 'Windows build'
    #condition: False  # disable this job for now

    pool:
      #vmImage: 'vs2017-win2016'
      vmImage: 'windows-2019'

    steps:

    #- task: UsePythonVersion@0
    #  inputs:
    #    versionSpec: '3.5.4'
    #    architecture: 'x86'

    - script: |
        C:
        wget -O boost_1_60_0.7z 'https://sourceforge.net/projects/boost/files/boost/1.60.0/boost_1_60_0.7z/download'
        7z x boost_1_60_0.7z
        dir
        pip install aqtinstall
        mkdir Qt
        python -m aqt install -O c:\Qt 5.11.3 windows desktop win32_mingw53
      displayName: 'Install dependencies'

    - bash: |
        echo 'set Qt_DIR=C:\Qt\Qt5.11.3\5.11.3' > ./scripts/custom-windows.bat
        echo 'set NSIS_DIR=C:\Program Files (x86)\NSIS' >> ./scripts/custom-windows.bat
        echo 'set MINGW_VER=mingw53_32' >> ./scripts/custom-windows.bat
        echo "BOOST_DIR = \"$BOOST_ROOT\"" >> ./librecad/src/custom.pro
        echo "BOOST_LIBDIR = \"$BOOST_ROOT\"" >> ./librecad/src/custom.pro
        cat ./librecad/src/custom.pro
      displayName: 'Prebuild'

    - script: |
        cd .\scripts
        build-windows.bat
      displayName: 'Build from source'

    - task: CopyFiles@2
      inputs:
        contents: '*.exe'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: WindowsInstaller


  - job: MacOSBuild
    displayName: 'MacOS build'
    condition: False  # disable this job for now

    pool:
      vmImage: 'macos-10.14'

    steps:

    - bash: |
        brew install \
            boost \
            qt5
        brew link qt5 --force
      displayName: 'Install dependencies'

    - bash: |
        #echo "QT_CONFIG -= no-pkg-config" >> custom.pro
        #qmake librecad.pro -r -spec macx-g++ CONFIG+=debug_and_release
        #qmake librecad.pro -r -spec macx-clang CONFIG+=debug_and_release
        #make release -j$(sysctl -n hw.ncpu)
        ./scripts/build-osx.sh
        #ls -lahR LibreCAD*
      displayName: 'Build from source'

    - task: CopyFiles@2
      inputs:
        contents: '*.dmg'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: MacOSPackage


- stage: UploadStage
  displayName: 'Upload stage'

  jobs:

  - deployment: UploadFiles
    displayName: 'Upload built packages'
    condition: False  # disable this job for now

    pool:
      vmImage: 'ubuntu-16.04'

    environment: 'librecad-dev'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadPath: '$(System.ArtifactsDirectory)'

          # See: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/curl-upload-files?view=azure-devops
          - task: cURLUploader@2
            inputs:
              files: '$(System.ArtifactsDirectory)/*'
              #authType: 'ServiceEndpoint' # Optional. Options: serviceEndpoint, userAndPass
              #serviceEndpoint: # Required when authType == ServiceEndpoint
              #username: # Optional
              #password: # Optional
              #url: # Required when authType == UserAndPass
              #remotePath: 'upload/$(Build.BuildId)/' # Optional
              #options: # Optional
              #redirectStderr: true # Optional

